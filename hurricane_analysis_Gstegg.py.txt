# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# write your update damages function here:
conversion = {"M": 1000000,
              "B": 1000000000}

def float_damages(damages_list):
  updated_damages = []
  for i in range(len(damages_list)):
    if damages_list[i] == 'Damages not recorded':
      updated_damages.append(damages_list[i])
    elif ("M" in damages_list[i]) == True:
      updated_damages.append(float(damages_list[i].replace("M", ""))*conversion["M"])
    elif ("B" in damages_list[i]) == True:
      updated_damages.append(float(damages[i].replace("B", ""))*conversion["B"])
  return updated_damages

# test function by updating damages
updated_damages = float_damages(damages)
print("Here are the damages as float values: "  + str(updated_damages))


# write your construct hurricane dictionary function here:
def lists_to_dictionary(list_1, list_2, list_3, list_4, list_5, list_6, list_7):
  dictionary_of_lists = {}
  for i in range(len(list_1)):
    dictionary_of_lists.update({list_1[i]: {"Name": list_1[i], "Month": list_2[i], "Year": list_3[i], "Max Sustained Wind": list_4[i], "Areas Affected": list_5[i], "Damages": list_6[i], "Deaths": list_7[i]}})
  return dictionary_of_lists

hurricanes_dictionary = lists_to_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)

print("")
print("Here is the hurricanes dictionary: ")
print(hurricanes_dictionary)

# write your construct hurricane by year dictionary function here:
def hurricanes_by_year(hurricanes_by_name):
  year_as_key = {}
  for hurricane in hurricanes_by_name:
    hurricane_dictionary = hurricanes_by_name[hurricane]
    hurricane_year = hurricane_dictionary.get("Year")
    if hurricane_year not in year_as_key:
      year_as_key[hurricane_year] = [hurricane_dictionary]
    else:
      year_as_key[hurricane_year].append(hurricane_dictionary)
      #year_as_key.get(hurricane_year).append(hurricane_dictionary)
  return year_as_key


print("")
print("Here is the dictionary of hurricanes with the year as key:")
print(hurricanes_by_year(hurricanes_dictionary))


# write your count affected areas function here:
def count_area(hurricanes_by_name):
  count_for_areas = {}
  for hurricane in hurricanes_by_name:
    for area in hurricanes_by_name[hurricane]["Areas Affected"]:
      if area not in count_for_areas:
        count_for_areas[area] = 1
      else:
        count_for_areas[area] += 1
  return count_for_areas

affected_areas_dictionary = count_area(hurricanes_dictionary)

print("")
print("Here is a count of hurricanes by area:")
print(affected_areas_dictionary)

# write your find most affected area function here:
def area_most_hit(affected_areas_count):
  most_affected_count = 0
  for area, count in affected_areas_count.items():
    if count >= most_affected_count:
      most_affected_count = count
      most_affected_area = area
  return most_affected_area, most_affected_count

print("")
print("The area most affected is " + area_most_hit(affected_areas_dictionary)[0] + " and number of hits is " + str(area_most_hit(affected_areas_dictionary)[1]) + ".")


# write your greatest number of deaths function here:
def find_greatest_deaths(hurricanes_by_name):
  cane = ""
  most_deaths = 0
  for hurricane in hurricanes_by_name:   
    if hurricanes_by_name[hurricane]["Deaths"] > most_deaths:
      most_deaths = hurricanes_by_name[hurricane]["Deaths"]
      cane = hurricane
  return cane, most_deaths

hurricane_most_deaths = find_greatest_deaths(hurricanes_dictionary)
print("")
print("The hurricane that produced the most deaths was " + hurricane_most_deaths[0] + " with " + str(hurricane_most_deaths[1]) + " deaths.")


# write your catgeorize by mortality function here:
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

def hurricane_mortality_rating(hurricanes_by_name):
  hurricanes_by_mortality_rating = {0: [], 1: [], 2: [], 3: [], 4: [], 5: []}
  for hurricane in hurricanes_by_name:
    hurricane_dictionary = hurricanes_by_name[hurricane]
    hurricane_mortality = hurricanes_by_name[hurricane]["Deaths"]
    if hurricane_mortality <= mortality_scale[0]:
      hurricanes_by_mortality_rating[0].append(hurricane_dictionary)
    for i in range(0, 4):
      if mortality_scale[i] < hurricane_mortality <= mortality_scale[i+1]:
        hurricanes_by_mortality_rating[i+1].append(hurricane_dictionary)
    if hurricane_mortality > mortality_scale[4]:
        hurricanes_by_mortality_rating[5].append(hurricane_dictionary)
  return hurricanes_by_mortality_rating

print('')
print('Here is the dictionary of hurricanes with mortality rating as key:')
print(hurricane_mortality_rating(hurricanes_dictionary))



# write your greatest damage function here:
def greatest_damage(hurricanes_by_name):
  cane = ""
  greatest_damage = 0
  for hurricane in hurricanes_by_name:
    if hurricanes_by_name[hurricane]["Damages"] == "Damages not recorded":
      greatest_damage = greatest_damage
      cane = cane       
    elif hurricanes_by_name[hurricane]["Damages"] > greatest_damage:
      greatest_damage = hurricanes_by_name[hurricane]["Damages"]
      cane = hurricane
  return cane, greatest_damage

hurricane_greatest_damage = greatest_damage(hurricanes_dictionary)
print("")
print("The hurricane that produced the highest damage was " + hurricane_greatest_damage[0] + " with " + str(hurricane_greatest_damage[1]) + " dollars.")


# write your catgeorize by damage function here:
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def hurricane_damage_rating(hurricanes_by_name):
  hurricanes_by_damage_rating = {0: [], 1: [], 2: [], 3: [], 4: [], 5: [], "Damages not recorded": []}
  for hurricane in hurricanes_by_name:
    hurricane_dictionary = hurricanes_by_name[hurricane]
    hurricane_damage = hurricanes_by_name[hurricane]["Damages"]
    if hurricane_damage == "Damages not recorded":
      hurricanes_by_damage_rating["Damages not recorded"].append(hurricane_dictionary)
    elif hurricane_damage <= damage_scale[0]:
      hurricanes_by_damage_rating[0].append(hurricane_dictionary)
    elif mortality_scale[0] < hurricane_damage <= damage_scale[1]:
        hurricanes_by_damage_rating[1].append(hurricane_dictionary)
    elif mortality_scale[1] < hurricane_damage <= damage_scale[2]:
        hurricanes_by_damage_rating[2].append(hurricane_dictionary)
    elif mortality_scale[2] < hurricane_damage <= damage_scale[3]:
        hurricanes_by_damage_rating[3].append(hurricane_dictionary)
    elif mortality_scale[3] < hurricane_damage <= damage_scale[4]:
        hurricanes_by_damage_rating[4].append(hurricane_dictionary)
    elif hurricane_damage > damage_scale[4]:
        hurricanes_by_damage_rating[5].append(hurricane_dictionary)
  return hurricanes_by_damage_rating

print('')
print('Here is the dictionary of hurricanes with damage rating as key:')
print(hurricane_damage_rating(hurricanes_dictionary))